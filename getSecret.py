import _tkinter
import PIL
import numpy as np
from tkinter import *
from tkinter import filedialog
from PIL import Image, ImageTk

# Intialiazes the tkinter application
window = Tk()
window.title('StegApp getSecret')
window.resizable(width=False, height=False)

class App():
    def __init__(self, master):
        """
        Variables used in the application
        """
        self.path = ''
        self.message = ''
        self.img = None
        self.img_as_np_array = None
        self.width = None
        self.height = None
        self.popup_window = None
        self.master = master
        
        """
        Frames and buttons used in the application
        """
        self.frame1 = Frame(master)
        self.frame1.grid(row=0, column=0)
        
        self.frame2 = Frame(master)
        self.frame2.grid(row=1, column=0)

        Label(self.frame2, text=f'Select Image').grid(row=1, column=0)
        browse_button = Button(master, text='Browse',command=lambda: [self.browse()])
        browse_button.grid(row=1, column=1)
        
        self.frame3 = Frame(master)
        self.frame3.grid(row=2, column=0)

        submit_button = Button(master, text='Show Message', command=lambda: [self.get_message(), self.popup()])
        submit_button.grid(row=2, column=1)

        self.frame4 = Frame(master)
        self.frame4.grid(row=3, column=0)

        save_button = Button(master, text='Save', command=self.save)
        save_button.grid(row=3, column=1)
        
        self.insctructions(self.frame1)

    def close(self, popup_window):
        """
        Closes the popup windows generated by the applications
        """
        if popup_window is not None:
                popup_window.destroy()

    def clearWidgets(self, *args):
        """
        Clears the widgets(messages) placed in a frame when called on specifed frame(s)
        """
        for frame in args:
            for widget in frame.winfo_children():
                widget.destroy()

    
        
    def browse(self):
        """
        Allows user to browse for an image to retrieve message from
        """
        self.clear()
        self.close(self.popup_window)
        self.clearWidgets(self.frame2, self.frame3, self.frame4)

        try:
            self.path = filedialog.askopenfilename(initialdir='/', title='Select image:',
                                              filetype=(('png', '*.png'), ('jpg', '*.jpg'), ('jpeg', '*.jpeg')))
            self.img = PIL.Image.open(self.path)
            self.width, self.height = self.img.size
            self.img_as_np_array = np.asarray(self.img, dtype=np.dtype('B'))
            Label(self.frame2, text=f'Image Selected: {self.path}').grid(row=0, column=0)

        except AttributeError:
            Label(self.frame2, text='Select Image').grid(row=0, column=0)

    def get_message(self):
        """
        Converts the image into a numpy array and begins reading the last 2 least significant bits 
        When start indicator is reached message is read
        When end indicator is reached messsage reading is stopped
        """
        if self.img:
            self.clearWidgets(self.frame4)
            last_lsb = self.img_as_np_array % 2
            second_last_lsb = (self.img_as_np_array // 2) % 2

            stacked_array = np.stack((second_last_lsb, last_lsb), axis=3)
            flat_array = np.ndarray.flatten(stacked_array)
            bytes_array = flat_array.reshape(((self.width * self.height * 2 * 3) // 8, 8))
            integer_array = np.packbits(bytes_array, bitorder='big')
            entire_img = ''
            self.message = ''
            reading_message = False
            indicator_start = '<<<<<'
            indicator_end = '>>>>>'
            for i in integer_array:
                if len(entire_img) >= 5:
                    if entire_img[-5:] == indicator_start:
                        reading_message = True
                    if reading_message:
                        self.message += chr(i)
                        if entire_img[-5:] == indicator_end:
                            reading_message = False
                            self.message = self.message[:-6]
                            break

                entire_img += chr(i)

    def clear(self):
        """
        Resets the variables once the user decides to browse for another image
        """
        self.path = ''
        self.message = ''
        self.img = None
        self.img_as_np_array = None
        self.width = None
        self.height = None

    def popup(self):
        """
        A popup window that shows the message and the image that is produced
        """
        self.close(self.popup_window)
        
        if self.img != None and self.message != '':
            Label(self.frame3, text='Image and Message Displayed').grid(row=2, column=0)
            self.popup_window = Toplevel(self.master)
            self.popup_window.title('Text and Image')
            
            
            text_box = Text(self.popup_window)
            text_box.insert(INSERT, self.message)
            text_box.config(state=DISABLED)
            Label(self.popup_window, text='Message').grid(row=0, column=0)
            text_box.grid(row=1, column=0)
            
            resized_im = self.img.resize((round(self.img.size[0] * 0.5), round(self.img.size[1] * 0.5)))
            tk_img = ImageTk.PhotoImage(resized_im)
            image = Label(self.popup_window, image=tk_img)
            image.image = tk_img
            Label(self.popup_window, text='Image').grid(row=0, column=1)
            image.grid(row=1, column=1)

            self.popup_window.mainloop()
        else:
            Label(self.frame3, text='Submit Image First').grid(row=1, column=0)
        
    def insctructions(self, frame):  
        """
        Insctructions for how to use the application
        """
        Label(frame, text='Insctructions').grid(row=0, column=0)
        Label(frame, text='1. Select Image').grid(row=1, column=0)
        Label(frame, text='2. Click Show Message to see hiden message').grid(row=2, column=0)
        Label(frame, text='3. (NOTE: if image is empty no text will appear)').grid(row=3, column=0)
        Label(frame, text='4. (optional) Save the hidden image').grid(row=4, column=0)
        Label(frame, text='____________________________________________').grid(row=5, column=0)
        
    def save(self):
        """
        Gives the user the option to save the retrieved message
        """
        if self.message != '':
            self.clearWidgets(self.frame4)
            file_name = self.path[:-4] + '_message.txt'
            with open(file_name, 'w') as f:
                f.write(self.message)
            Label(self.frame4, text=f'Message saved at {file_name}').grid(row=2, column=0)
        elif self.message=='':
            Label(self.frame4, text='Show Message First').grid(row=2, column=0)

app = App(window)
window.mainloop()
