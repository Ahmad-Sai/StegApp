import PIL
import numpy as np
from tkinter import *
from tkinter import filedialog
from PIL import Image, ImageTk

# Intialiazes the tkinter application
window = Tk()
window.resizable(width=False, height=False)
window.title('StegApp hideSecret')

class App():
    def __init__(self, master):
        """
        Variables used in the application
        """
        self.master = master
        self.path = ''
        self.msg = ''
        self.img = None
        self.img_as_np_array = None
        self.width = None
        self.height = None
        self.message_list = []
        self.new_image = None
        self.enter_message = ''
        self.popup_window = None
        self.popup_window2 = None
           
        """
        Frames and buttons used in the application
        """
        self.frame1 = Frame(master)
        self.frame1.grid(row=0, column=0)
       
        self.frame2 = Frame(master)
        self.frame2.grid(row=1, column=0)

        Label(self.frame2, text=f'Select Image').grid(row=0, column=0)
        browse_button = Button(master, text='Browse', command=self.browse)
        browse_button.grid(row=1, column=1)
        
        self.entry = Entry(master, width=80)
        self.entry.grid(row=2, column=0)

        submit_button = Button(master, text='Submit Message', command=lambda: [self.submit()])
        submit_button.grid(row=2, column=1)

        self.frame3 = Frame(master)
        self.frame3.grid(row=3, column=0)

        self.frame4 = Frame(master)
        self.frame4.grid(row=4, column=0)

        save_button = Button(master, text='Save', command=self.save)
        save_button.grid(row=4, column=1)
   
        self.instructions(self.frame1)

    def close(self, *args):
        """
        Closes the popup windows generated by the applications
        """
        for popup in args:
            if popup is not None:
                popup.destroy()

    def clearWidgets(self, *args):
        """
        Clears the widgets(messages) placed in a frame when called on specifed frame(s)
        """
        for frame in args:
            for widget in frame.winfo_children():
                widget.destroy()

    def browse(self):
        """
        Allows user to browse for an image to perfrom steganography on
        """
        self.clear()
        self.clearWidgets(self.frame2, self.frame3, self.frame4)
        self.close(self.popup_window, self.popup_window2)

        try:
            self.path = filedialog.askopenfilename(initialdir='/', title='Select image:',
                                              filetype=(('png', '*.png'), ('jpg', '*.jpg'), ('jpeg', '*.jpeg')))
            self.img = PIL.Image.open(self.path)
            self.width, self.height = self.img.size
            self.img_as_np_array = np.asarray(self.img, dtype=np.dtype('B'))
            Label(self.frame2, text=f'Image Selected: {self.path}').grid(row=0, column=0)

        except:
            Label(self.frame2, text='Select Image').grid(row=4, column=0)

    def clear(self):
        """
        Resets the variables once the user decides to browse for another image
        """
        self.path = ''
        self.msg = ''
        self.img = None
        self.img_as_np_array = None
        self.width = None
        self.height = None
        self.message_list = []
        self.new_image = None
        self.enter_message = ''

    def submit(self):
        """
        Submit allows the user to submit a message. 
        Message is then turned into bits and steganography is performed on image
        """
        self.close(self.popup_window, self.popup_window2)
        self.clearWidgets(self.frame4)
       
        if self.entry.get() != '' and self.img:
            self.clearWidgets(self.frame3)

            self.msg = self.entry.get()
            self.enter_message = self.entry.get()
            self.msg = f"<<<<<{self.msg}>>>>>"

            self.message_list = []
            for i in range(len(self.msg)):
                byte = (format(ord(self.msg[i]), "08b"))
                self.message_list.append(int(byte[0:2], 2))
                self.message_list.append(int(byte[2:4], 2))
                self.message_list.append(int(byte[4:6], 2))
                self.message_list.append(int(byte[6:8], 2))

            self.message_list = np.array(self.message_list)
            rand_int2 = np.random.randint(0, 4, (self.width * self.height * 3))
            length = len(self.message_list)
            rand_int2[0:length] = self.message_list
            self.message_list = np.reshape(rand_int2, (self.height, self.width, 3))
            self.entry.delete(0, "end")
       
        if self.enter_message != '':
            last_lsb = self.img_as_np_array % 2
            second_last_lsb = (self.img_as_np_array // 2) % 2

            msg_in_pic = self.img_as_np_array - (last_lsb + 2 * second_last_lsb) + self.message_list

            self.new_image = Image.fromarray(msg_in_pic.astype('uint8'))
            Label(self.frame4, text="Image Created with Message").grid(row=3, column=0)
            self.image_window()
        else:
            Label(self.frame4, text='Submit Image').grid(row=4, column=0)
           
    def image_window(self):
        """
        A popup window that shows the message and the image that is produced
        """
        if self.new_image and self.enter_message:
            self.popup_window = Toplevel(self.master)
            self.popup_window.resizable(width=False, height=False)
            self.popup_window.title('Images')


            text_box = Text(self.popup_window)
            text_box.insert(INSERT, self.enter_message)
            text_box.config(state=DISABLED)
            text_box.grid(row=1, column=0)
            Label(self.popup_window, text='Your Message').grid(row=0, column=0)

            resized_im2 = self.new_image.resize((round(self.new_image.size[0] * 0.5), round(self.new_image.size[1] * 0.5)))
            tk_img2 = ImageTk.PhotoImage(resized_im2)
            image2 = Label(self.popup_window, image=tk_img2)
            image2.image = tk_img2
            Label(self.popup_window, text='Your New Image').grid(row=0, column=1)
            image2.grid(row=1, column=1)
            self.popup_window.mainloop()
        else:
            Label(self.frame4, text='Select Image and Submit Message').grid(row=4, column=0)

    def instructions(self, frame):
        """
        Insctrctions for how to use the application
        """
        Label(frame, text="Instructions").grid(row=1, column=0, columnspan=2)
        Label(frame, text="1. Choose Image that you want to hide message in").grid(row=2, column=0, columnspan=2)
        Label(frame, text="2. Enter Message in Text Box and Submit").grid(row=3, column=0, columnspan=2)
        Label(frame, text="3. Press Create and Show Button to see new image").grid(row=4, column=0, columnspan=2)
        Label(frame, text="4. (optional) Save").grid(row=5, column=0, columnspan=2)
        Label(frame, text="----------------------------------------------").grid(row=6, column=0, columnspan=2)
       
    def save(self):
        """
        Gives the user the option to save the new image
        """
        self.clearWidgets(self.frame4)
        if self.new_image:
            newpath = self.path[:-4] + ' msg.png'
            self.new_image.save(newpath)
            Label(self.frame4, text=f'Saved at {newpath}').grid(row=4, column=0)
        else:
            Label(self.frame4, text='Submit Image and message').grid(row=4, column=0)

app1 = App(window)
window.mainloop()
